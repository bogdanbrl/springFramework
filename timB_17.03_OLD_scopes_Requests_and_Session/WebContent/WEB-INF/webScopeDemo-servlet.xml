<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd">


	<context:component-scan
		base-package="com.criptex.springDemo.controller">
	</context:component-scan>
	<mvc:annotation-driven></mvc:annotation-driven>
	<bean id="randomizerForRequest"
		class="com.criptex.springDemo.service.RandomizerRequstScope"
		scope="request">
	<aop:scoped-proxy />
	</bean>
	<bean id="randomizerForSession"
		class="com.criptex.springDemo.service.RandomizerSessionScope"
		scope="session">
	<aop:scoped-proxy />
	<!-- aop:scoped-proxy - if you want to inject a http request scoped bean 
		or session scope bean into another bean, then it's necesary to inject an 
		aop proxy instead of the scoped bean. The proxy object exposes the same public 
		interface as the scoped object. A session scope can span multiple requests. 
		Never use the aop scoped proxy element with beans that are scoped as singletons 
		or prototypes (the container will throw an error). -->
	</bean>
</beans>
