<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.criptex</groupId>
    <artifactId>timB_07_11_NEW_todo_list_simpleServiceChallenge</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>war</packaging>      <!--  adding war plugin-->

    <properties>
        <java.version>11</java.version>
        <spring.version>5.2.5.RELEASE</spring.version>
        <lombok.version>1.18.12</lombok.version>
        <logback.version>1.2.3</logback.version>
        <javax.annotation.version>1.3.2</javax.annotation.version>
        <servlet-api.version>4.0.1</servlet-api.version>
        <jstl.version>1.2</jstl.version>
    </properties>

    <dependencies>
        <!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>${lombok.version}</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/ch.qos.logback/logback-classic -->
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>${logback.version}</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/javax.annotation/javax.annotation-api -->
        <dependency>
            <groupId>javax.annotation</groupId>
            <artifactId>javax.annotation-api</artifactId>
            <version>${javax.annotation.version}</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>${servlet-api.version}</version>
            <scope>provided</scope>
        </dependency>
        <!-- https://mvnrepository.com/artifact/javax.servlet.jsp.jstl/jstl -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
            <version>${jstl.version}</version>
        </dependency>


    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.0</version>
                <configuration>
                    <target>${java.version}</target>
                    <source>${java.version}</source>
                    <release>${java.version}</release>
                </configuration>
            </plugin>
            <plugin>
                <!-- add war plugin -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>3.2.3</version>
                <configuration>
                    <failOnMissingWebXml>false</failOnMissingWebXml>
                </configuration>
            </plugin>
            <plugin>

                <!-- This will create a default Jetty 7.x installed local container and start it using the Cargo Maven 2 /
                Maven 3 plugin with your Maven 2 /
                Maven 3 project's deployable (a WAR, for example) deployed to it; so you can run manual tests
                (as a first introduction).
What is magic is that if you now want to run the same tests with Tomcat 7.x you simply need to run (in one line):
mvn clean verify org.codehaus.cargo:cargo-maven2-plugin:run
    -Dcargo.maven.containerId=tomcat7x
    -Dcargo.maven.containerUrl=https://repo.maven.org/maven2/org/apache/tomcat/tomcat/7.0.68/tomcat-7.0.68.zip
That command will automatically download Tomcat 7.0.68 from the specified URL
(taking into account any proxy server setting you would have in Maven 2 / Maven 3),
instantiate the container, create a local configuration with your application and run it.
It will also save the downloaded container in the default directory
(see the Maven 2 / Maven 3 Plugin Reference Guide for details),
so it won't get downloaded when you run the same command twice. -->

                <!-- add cargo plugin -->
                <groupId>org.codehaus.cargo</groupId>
                <artifactId>cargo-maven2-plugin</artifactId>
                <version>1.7.11</version>
                <configuration>
                    <container>
                        <containerId>tomcat9x</containerId>
                        <type>embedded</type>
                    </container>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>